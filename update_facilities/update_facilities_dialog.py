# -*- coding: utf-8 -*-
"""
/***************************************************************************
 UpdateFacilitiesDialog
                                 A QGIS plugin
 Updates facilities database with new facilities layer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-11-08
        git sha              : $Format:%H$
        copyright            : (C) 2024 by ToitÅ« Te Whenua Land Information New Zealand
        email                : blah@linz.govt.nz
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.core import QgsMapLayerProxyModel
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import pyqtSlot
from qgis.PyQt.QtGui import QIcon

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "update_facilities_dialog_base.ui")
)

__location__ = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))


class UpdateFacilitiesDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, update_facilities_plugin):
        """Constructor."""
        super(UpdateFacilitiesDialog, self).__init__()
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.update_facilities_plugin = update_facilities_plugin

        self.btn_test_dbconn.clicked.connect(self.on_btn_test_dbconn)

        # set the combobox which takes in the input for loading into the temp layer
        # set so only accepts vector layers
        self.comboBox_update_temp_facilities.setFilters(
            QgsMapLayerProxyModel.VectorLayer
        )
        # set so no layer selected when first opened
        self.comboBox_update_temp_facilities.setAllowEmptyLayer(True)
        self.comboBox_update_temp_facilities.setCurrentIndex(0)

        self.btn_update_temp_facilities.clicked.connect(
            self.on_btn_update_temp_facilities
        )

        self.btn_update_facilities_table.clicked.connect(
            self.on_btn_update_facilities_table
        )

        icon_path = os.path.join(__location__, "media", "clear_message_icon.svg")
        self.pb_clear_message.setIcon(QIcon(icon_path))
        self.pb_clear_message.setToolTip("Clears the message box")

        self.pb_clear_message.clicked.connect(self.on_pb_clear_message)

    @pyqtSlot()
    def on_btn_test_dbconn(self):
        self.msgbox.insertPlainText("\n--------------------\n\n")
        self.update_facilities_plugin.test_dbconn.run_test_dbconn()

    @pyqtSlot()
    def on_btn_update_facilities_table(self):
        self.update_facilities_plugin.update_facilities_table.run_update_facilities_table()

    @pyqtSlot()
    def on_btn_update_temp_facilities(self):
        self.update_facilities_plugin.update_temp_facilities.run_update_temp_facilities()

    @pyqtSlot()
    def on_pb_clear_message(self):
        self.update_facilities_plugin.dlg.msgbox.clear()
